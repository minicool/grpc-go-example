// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

/*
Package employer is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	Employer
	EmployerRequest
	EmployerResponse
	EmployerListRequest
	EmployerListResponse
	EmployerMapRequest
	EmployerMapResponse
	EmployerAllRequest
	EmployerAllResponse
	EmployerImageRequest
	EmployerImageResponse
	GetEmployerImageRequest
	GetEmployerImageResponse
*/
package employer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Employer struct {
	EmployerId uint32 `protobuf:"varint,1,opt,name=employerId" json:"employerId,omitempty"`
	Age        uint32 `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	PicName    string `protobuf:"bytes,4,opt,name=picName" json:"picName,omitempty"`
}

func (m *Employer) Reset()                    { *m = Employer{} }
func (m *Employer) String() string            { return proto.CompactTextString(m) }
func (*Employer) ProtoMessage()               {}
func (*Employer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Employer) GetEmployerId() uint32 {
	if m != nil {
		return m.EmployerId
	}
	return 0
}

func (m *Employer) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Employer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Employer) GetPicName() string {
	if m != nil {
		return m.PicName
	}
	return ""
}

type EmployerRequest struct {
	EmployerId uint32 `protobuf:"varint,1,opt,name=employerId" json:"employerId,omitempty"`
}

func (m *EmployerRequest) Reset()                    { *m = EmployerRequest{} }
func (m *EmployerRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployerRequest) ProtoMessage()               {}
func (*EmployerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EmployerRequest) GetEmployerId() uint32 {
	if m != nil {
		return m.EmployerId
	}
	return 0
}

type EmployerResponse struct {
	Employer *Employer `protobuf:"bytes,1,opt,name=employer" json:"employer,omitempty"`
}

func (m *EmployerResponse) Reset()                    { *m = EmployerResponse{} }
func (m *EmployerResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployerResponse) ProtoMessage()               {}
func (*EmployerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EmployerResponse) GetEmployer() *Employer {
	if m != nil {
		return m.Employer
	}
	return nil
}

type EmployerListRequest struct {
	EmployerIndex uint32 `protobuf:"varint,1,opt,name=employerIndex" json:"employerIndex,omitempty"`
	EmployerCount uint32 `protobuf:"varint,2,opt,name=employerCount" json:"employerCount,omitempty"`
}

func (m *EmployerListRequest) Reset()                    { *m = EmployerListRequest{} }
func (m *EmployerListRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployerListRequest) ProtoMessage()               {}
func (*EmployerListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EmployerListRequest) GetEmployerIndex() uint32 {
	if m != nil {
		return m.EmployerIndex
	}
	return 0
}

func (m *EmployerListRequest) GetEmployerCount() uint32 {
	if m != nil {
		return m.EmployerCount
	}
	return 0
}

type EmployerListResponse struct {
	Employers []*Employer `protobuf:"bytes,1,rep,name=employers" json:"employers,omitempty"`
}

func (m *EmployerListResponse) Reset()                    { *m = EmployerListResponse{} }
func (m *EmployerListResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployerListResponse) ProtoMessage()               {}
func (*EmployerListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EmployerListResponse) GetEmployers() []*Employer {
	if m != nil {
		return m.Employers
	}
	return nil
}

type EmployerMapRequest struct {
}

func (m *EmployerMapRequest) Reset()                    { *m = EmployerMapRequest{} }
func (m *EmployerMapRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployerMapRequest) ProtoMessage()               {}
func (*EmployerMapRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type EmployerMapResponse struct {
	EmployerMap map[string]*Employer `protobuf:"bytes,1,rep,name=employerMap" json:"employerMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EmployerMapResponse) Reset()                    { *m = EmployerMapResponse{} }
func (m *EmployerMapResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployerMapResponse) ProtoMessage()               {}
func (*EmployerMapResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EmployerMapResponse) GetEmployerMap() map[string]*Employer {
	if m != nil {
		return m.EmployerMap
	}
	return nil
}

type EmployerAllRequest struct {
}

func (m *EmployerAllRequest) Reset()                    { *m = EmployerAllRequest{} }
func (m *EmployerAllRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployerAllRequest) ProtoMessage()               {}
func (*EmployerAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type EmployerAllResponse struct {
	Employers []*Employer `protobuf:"bytes,1,rep,name=employers" json:"employers,omitempty"`
}

func (m *EmployerAllResponse) Reset()                    { *m = EmployerAllResponse{} }
func (m *EmployerAllResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployerAllResponse) ProtoMessage()               {}
func (*EmployerAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EmployerAllResponse) GetEmployers() []*Employer {
	if m != nil {
		return m.Employers
	}
	return nil
}

type EmployerImageRequest struct {
	EmployerId uint32 `protobuf:"varint,1,opt,name=employerId" json:"employerId,omitempty"`
	PicName    string `protobuf:"bytes,2,opt,name=picName" json:"picName,omitempty"`
	PicData    []byte `protobuf:"bytes,3,opt,name=picData,proto3" json:"picData,omitempty"`
}

func (m *EmployerImageRequest) Reset()                    { *m = EmployerImageRequest{} }
func (m *EmployerImageRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployerImageRequest) ProtoMessage()               {}
func (*EmployerImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EmployerImageRequest) GetEmployerId() uint32 {
	if m != nil {
		return m.EmployerId
	}
	return 0
}

func (m *EmployerImageRequest) GetPicName() string {
	if m != nil {
		return m.PicName
	}
	return ""
}

func (m *EmployerImageRequest) GetPicData() []byte {
	if m != nil {
		return m.PicData
	}
	return nil
}

type EmployerImageResponse struct {
	IsSuccesd bool `protobuf:"varint,1,opt,name=isSuccesd" json:"isSuccesd,omitempty"`
}

func (m *EmployerImageResponse) Reset()                    { *m = EmployerImageResponse{} }
func (m *EmployerImageResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployerImageResponse) ProtoMessage()               {}
func (*EmployerImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EmployerImageResponse) GetIsSuccesd() bool {
	if m != nil {
		return m.IsSuccesd
	}
	return false
}

type GetEmployerImageRequest struct {
	EmployerId uint32 `protobuf:"varint,1,opt,name=employerId" json:"employerId,omitempty"`
}

func (m *GetEmployerImageRequest) Reset()                    { *m = GetEmployerImageRequest{} }
func (m *GetEmployerImageRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEmployerImageRequest) ProtoMessage()               {}
func (*GetEmployerImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetEmployerImageRequest) GetEmployerId() uint32 {
	if m != nil {
		return m.EmployerId
	}
	return 0
}

type GetEmployerImageResponse struct {
	PicName string `protobuf:"bytes,1,opt,name=picName" json:"picName,omitempty"`
	PicData []byte `protobuf:"bytes,2,opt,name=picData,proto3" json:"picData,omitempty"`
}

func (m *GetEmployerImageResponse) Reset()                    { *m = GetEmployerImageResponse{} }
func (m *GetEmployerImageResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEmployerImageResponse) ProtoMessage()               {}
func (*GetEmployerImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetEmployerImageResponse) GetPicName() string {
	if m != nil {
		return m.PicName
	}
	return ""
}

func (m *GetEmployerImageResponse) GetPicData() []byte {
	if m != nil {
		return m.PicData
	}
	return nil
}

func init() {
	proto.RegisterType((*Employer)(nil), "employer.Employer")
	proto.RegisterType((*EmployerRequest)(nil), "employer.EmployerRequest")
	proto.RegisterType((*EmployerResponse)(nil), "employer.EmployerResponse")
	proto.RegisterType((*EmployerListRequest)(nil), "employer.EmployerListRequest")
	proto.RegisterType((*EmployerListResponse)(nil), "employer.EmployerListResponse")
	proto.RegisterType((*EmployerMapRequest)(nil), "employer.EmployerMapRequest")
	proto.RegisterType((*EmployerMapResponse)(nil), "employer.EmployerMapResponse")
	proto.RegisterType((*EmployerAllRequest)(nil), "employer.EmployerAllRequest")
	proto.RegisterType((*EmployerAllResponse)(nil), "employer.EmployerAllResponse")
	proto.RegisterType((*EmployerImageRequest)(nil), "employer.EmployerImageRequest")
	proto.RegisterType((*EmployerImageResponse)(nil), "employer.EmployerImageResponse")
	proto.RegisterType((*GetEmployerImageRequest)(nil), "employer.GetEmployerImageRequest")
	proto.RegisterType((*GetEmployerImageResponse)(nil), "employer.GetEmployerImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmployerService service

type EmployerServiceClient interface {
	GetEmployer(ctx context.Context, in *EmployerRequest, opts ...grpc.CallOption) (*EmployerResponse, error)
	GetEmployerList(ctx context.Context, in *EmployerListRequest, opts ...grpc.CallOption) (*EmployerListResponse, error)
	GetEmployerMap(ctx context.Context, in *EmployerMapRequest, opts ...grpc.CallOption) (*EmployerMapResponse, error)
	GetEmployerAll(ctx context.Context, in *EmployerAllRequest, opts ...grpc.CallOption) (EmployerService_GetEmployerAllClient, error)
	AddEmployerImage(ctx context.Context, opts ...grpc.CallOption) (EmployerService_AddEmployerImageClient, error)
	GetEmployerImage(ctx context.Context, in *GetEmployerImageRequest, opts ...grpc.CallOption) (EmployerService_GetEmployerImageClient, error)
}

type employerServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmployerServiceClient(cc *grpc.ClientConn) EmployerServiceClient {
	return &employerServiceClient{cc}
}

func (c *employerServiceClient) GetEmployer(ctx context.Context, in *EmployerRequest, opts ...grpc.CallOption) (*EmployerResponse, error) {
	out := new(EmployerResponse)
	err := grpc.Invoke(ctx, "/employer.EmployerService/getEmployer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employerServiceClient) GetEmployerList(ctx context.Context, in *EmployerListRequest, opts ...grpc.CallOption) (*EmployerListResponse, error) {
	out := new(EmployerListResponse)
	err := grpc.Invoke(ctx, "/employer.EmployerService/getEmployerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employerServiceClient) GetEmployerMap(ctx context.Context, in *EmployerMapRequest, opts ...grpc.CallOption) (*EmployerMapResponse, error) {
	out := new(EmployerMapResponse)
	err := grpc.Invoke(ctx, "/employer.EmployerService/getEmployerMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employerServiceClient) GetEmployerAll(ctx context.Context, in *EmployerAllRequest, opts ...grpc.CallOption) (EmployerService_GetEmployerAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmployerService_serviceDesc.Streams[0], c.cc, "/employer.EmployerService/getEmployerAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &employerServiceGetEmployerAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployerService_GetEmployerAllClient interface {
	Recv() (*EmployerAllResponse, error)
	grpc.ClientStream
}

type employerServiceGetEmployerAllClient struct {
	grpc.ClientStream
}

func (x *employerServiceGetEmployerAllClient) Recv() (*EmployerAllResponse, error) {
	m := new(EmployerAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employerServiceClient) AddEmployerImage(ctx context.Context, opts ...grpc.CallOption) (EmployerService_AddEmployerImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmployerService_serviceDesc.Streams[1], c.cc, "/employer.EmployerService/addEmployerImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &employerServiceAddEmployerImageClient{stream}
	return x, nil
}

type EmployerService_AddEmployerImageClient interface {
	Send(*EmployerImageRequest) error
	CloseAndRecv() (*EmployerImageResponse, error)
	grpc.ClientStream
}

type employerServiceAddEmployerImageClient struct {
	grpc.ClientStream
}

func (x *employerServiceAddEmployerImageClient) Send(m *EmployerImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *employerServiceAddEmployerImageClient) CloseAndRecv() (*EmployerImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmployerImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employerServiceClient) GetEmployerImage(ctx context.Context, in *GetEmployerImageRequest, opts ...grpc.CallOption) (EmployerService_GetEmployerImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmployerService_serviceDesc.Streams[2], c.cc, "/employer.EmployerService/getEmployerImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &employerServiceGetEmployerImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployerService_GetEmployerImageClient interface {
	Recv() (*GetEmployerImageResponse, error)
	grpc.ClientStream
}

type employerServiceGetEmployerImageClient struct {
	grpc.ClientStream
}

func (x *employerServiceGetEmployerImageClient) Recv() (*GetEmployerImageResponse, error) {
	m := new(GetEmployerImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EmployerService service

type EmployerServiceServer interface {
	GetEmployer(context.Context, *EmployerRequest) (*EmployerResponse, error)
	GetEmployerList(context.Context, *EmployerListRequest) (*EmployerListResponse, error)
	GetEmployerMap(context.Context, *EmployerMapRequest) (*EmployerMapResponse, error)
	GetEmployerAll(*EmployerAllRequest, EmployerService_GetEmployerAllServer) error
	AddEmployerImage(EmployerService_AddEmployerImageServer) error
	GetEmployerImage(*GetEmployerImageRequest, EmployerService_GetEmployerImageServer) error
}

func RegisterEmployerServiceServer(s *grpc.Server, srv EmployerServiceServer) {
	s.RegisterService(&_EmployerService_serviceDesc, srv)
}

func _EmployerService_GetEmployer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerServiceServer).GetEmployer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employer.EmployerService/GetEmployer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerServiceServer).GetEmployer(ctx, req.(*EmployerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployerService_GetEmployerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerServiceServer).GetEmployerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employer.EmployerService/GetEmployerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerServiceServer).GetEmployerList(ctx, req.(*EmployerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployerService_GetEmployerMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployerMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerServiceServer).GetEmployerMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employer.EmployerService/GetEmployerMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerServiceServer).GetEmployerMap(ctx, req.(*EmployerMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployerService_GetEmployerAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmployerAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployerServiceServer).GetEmployerAll(m, &employerServiceGetEmployerAllServer{stream})
}

type EmployerService_GetEmployerAllServer interface {
	Send(*EmployerAllResponse) error
	grpc.ServerStream
}

type employerServiceGetEmployerAllServer struct {
	grpc.ServerStream
}

func (x *employerServiceGetEmployerAllServer) Send(m *EmployerAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmployerService_AddEmployerImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmployerServiceServer).AddEmployerImage(&employerServiceAddEmployerImageServer{stream})
}

type EmployerService_AddEmployerImageServer interface {
	SendAndClose(*EmployerImageResponse) error
	Recv() (*EmployerImageRequest, error)
	grpc.ServerStream
}

type employerServiceAddEmployerImageServer struct {
	grpc.ServerStream
}

func (x *employerServiceAddEmployerImageServer) SendAndClose(m *EmployerImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *employerServiceAddEmployerImageServer) Recv() (*EmployerImageRequest, error) {
	m := new(EmployerImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmployerService_GetEmployerImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEmployerImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployerServiceServer).GetEmployerImage(m, &employerServiceGetEmployerImageServer{stream})
}

type EmployerService_GetEmployerImageServer interface {
	Send(*GetEmployerImageResponse) error
	grpc.ServerStream
}

type employerServiceGetEmployerImageServer struct {
	grpc.ServerStream
}

func (x *employerServiceGetEmployerImageServer) Send(m *GetEmployerImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EmployerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "employer.EmployerService",
	HandlerType: (*EmployerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getEmployer",
			Handler:    _EmployerService_GetEmployer_Handler,
		},
		{
			MethodName: "getEmployerList",
			Handler:    _EmployerService_GetEmployerList_Handler,
		},
		{
			MethodName: "getEmployerMap",
			Handler:    _EmployerService_GetEmployerMap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getEmployerAll",
			Handler:       _EmployerService_GetEmployerAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "addEmployerImage",
			Handler:       _EmployerService_AddEmployerImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "getEmployerImage",
			Handler:       _EmployerService_GetEmployerImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x95, 0xdb, 0x01, 0xed, 0x2d, 0x65, 0xd5, 0x65, 0x88, 0x10, 0x6d, 0xa3, 0x58, 0x3c, 0xf4,
	0x29, 0x1a, 0x43, 0x48, 0xc0, 0xdb, 0xc6, 0xa6, 0x31, 0x89, 0x0e, 0x94, 0x89, 0x17, 0x78, 0x32,
	0xed, 0x55, 0xd5, 0x91, 0x26, 0xa1, 0x49, 0xa6, 0xf5, 0xdb, 0xf8, 0x36, 0x24, 0x14, 0xc7, 0x8e,
	0x9d, 0x35, 0x19, 0xa8, 0x6f, 0xce, 0xf1, 0xf5, 0x39, 0xf7, 0x5c, 0x1f, 0xb7, 0xd0, 0xa7, 0x1b,
	0xb1, 0x88, 0x03, 0xf2, 0xe2, 0x65, 0x94, 0x46, 0xd8, 0xa1, 0x45, 0x1c, 0x44, 0x2b, 0x5a, 0xf2,
	0x2b, 0xe8, 0x9c, 0xaa, 0x35, 0xee, 0x03, 0x68, 0xfc, 0x7c, 0xea, 0xb0, 0x21, 0x1b, 0xf5, 0x7d,
	0x0b, 0xc1, 0x01, 0xb4, 0xc5, 0x8c, 0x9c, 0x96, 0xdc, 0xc8, 0x97, 0x88, 0xb0, 0x15, 0x8a, 0x05,
	0x39, 0xed, 0x21, 0x1b, 0x75, 0x7d, 0xb9, 0x46, 0x07, 0x1e, 0xc4, 0xf3, 0xc9, 0x45, 0x0e, 0x6f,
	0x49, 0x58, 0x7f, 0xf2, 0x57, 0xb0, 0xad, 0xb5, 0x7c, 0xfa, 0x95, 0x51, 0x92, 0xfe, 0x4b, 0x92,
	0x1f, 0xc3, 0xc0, 0x1c, 0x49, 0xe2, 0x28, 0x4c, 0x08, 0x3d, 0x28, 0xdb, 0x97, 0x27, 0x7a, 0x87,
	0xe8, 0x69, 0xc0, 0x2b, 0xab, 0x8d, 0x45, 0x01, 0x8f, 0x35, 0xfa, 0x69, 0x9e, 0xa4, 0x5a, 0xfa,
	0x25, 0xf4, 0x4b, 0xa1, 0x70, 0x4a, 0x37, 0x4a, 0xbd, 0x0a, 0xda, 0x55, 0x1f, 0xa2, 0x2c, 0x4c,
	0x95, 0xfb, 0x2a, 0xc8, 0x3f, 0xc2, 0x4e, 0x55, 0x42, 0xb5, 0x7a, 0x00, 0x5d, 0x5d, 0x98, 0x38,
	0x6c, 0xd8, 0x6e, 0xe8, 0xd5, 0x14, 0xf1, 0x1d, 0x40, 0x0d, 0x8f, 0x45, 0xac, 0x7a, 0xe5, 0xbf,
	0x99, 0xf1, 0x20, 0x61, 0xc5, 0xff, 0x05, 0x7a, 0x64, 0x60, 0xa5, 0xe0, 0xad, 0x2b, 0x58, 0x67,
	0x6c, 0xec, 0x34, 0x4c, 0x97, 0x2b, 0xdf, 0xa6, 0x70, 0x7d, 0x33, 0x70, 0x5d, 0x90, 0xdf, 0xfb,
	0x4f, 0x5a, 0xc9, 0xf9, 0x74, 0xfd, 0x7c, 0x89, 0x23, 0xb8, 0x77, 0x2d, 0x82, 0xac, 0xc8, 0x42,
	0xbd, 0xa7, 0xa2, 0xe0, 0x7d, 0xeb, 0x2d, 0xb3, 0x3d, 0x1d, 0x05, 0x81, 0xf6, 0x74, 0x66, 0x2c,
	0x49, 0x74, 0xe3, 0x91, 0x5d, 0x99, 0xe1, 0x9f, 0x2f, 0xc4, 0x8c, 0xfe, 0x33, 0x5b, 0x76, 0x50,
	0x5b, 0x95, 0xa0, 0xaa, 0x9d, 0x13, 0x91, 0x0a, 0x99, 0xec, 0x87, 0xbe, 0xfe, 0xe4, 0x6f, 0xe0,
	0xc9, 0x2d, 0x2d, 0xd5, 0xf6, 0x2e, 0x74, 0xe7, 0xc9, 0x65, 0x36, 0x99, 0x50, 0x52, 0x68, 0x75,
	0x7c, 0x03, 0xf0, 0x77, 0xf0, 0xf4, 0x8c, 0xd2, 0x4d, 0xba, 0xe4, 0x17, 0xe0, 0xac, 0x1f, 0x55,
	0xa2, 0x96, 0x03, 0xd6, 0xe8, 0xa0, 0x55, 0x71, 0x70, 0xf8, 0xa7, 0x6d, 0x5e, 0xe1, 0x25, 0x2d,
	0xaf, 0xe7, 0x13, 0xc2, 0x13, 0xe8, 0xcd, 0x8c, 0x06, 0x3e, 0xab, 0x99, 0x77, 0xd1, 0xad, 0xeb,
	0xd6, 0x6d, 0x95, 0x61, 0xdc, 0xb6, 0x58, 0xf2, 0x77, 0x80, 0x7b, 0xeb, 0xe5, 0xd6, 0x13, 0x74,
	0xf7, 0x9b, 0xb6, 0x15, 0xe3, 0x18, 0x1e, 0x59, 0x8c, 0x63, 0x11, 0xe3, 0x6e, 0x43, 0xb6, 0x0b,
	0xbe, 0xbd, 0x3b, 0x93, 0x8f, 0x9f, 0x2b, 0x74, 0x47, 0x41, 0x50, 0x47, 0x67, 0x12, 0x5a, 0x47,
	0x67, 0x25, 0xf5, 0x80, 0xe1, 0x57, 0x18, 0x88, 0xe9, 0xb4, 0x72, 0x37, 0x58, 0xe3, 0xc9, 0xbe,
	0x6f, 0xf7, 0x79, 0xe3, 0x7e, 0x41, 0x3b, 0x62, 0xf8, 0x1d, 0x06, 0xb3, 0x5b, 0x57, 0x8e, 0x2f,
	0xcc, 0xb1, 0x86, 0x24, 0xb9, 0xfc, 0xae, 0x12, 0xdd, 0xf3, 0x31, 0x7c, 0x2b, 0x7f, 0x19, 0x7f,
	0xdc, 0x97, 0xff, 0x06, 0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x33, 0xb5, 0xbd, 0x1e,
	0x06, 0x00, 0x00,
}
